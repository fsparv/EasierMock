import java.text.SimpleDateFormat

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'

compileJava {
    sourceCompatibility = 1.6
    targetCompatibility = 1.6
}

version = '1.0.1-LOCAL'
group = 'com.needhamsoftware'

ext.isSnapshot = version.endsWith('-SNAPSHOT')
ext.isLocal = version.endsWith('-LOCAL')
ext.isRelease = !( isLocal || isSnapshot)

ext.releaseRepo = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
ext.snapshotRepo = 'https://oss.sonatype.org/content/repositories/snapshots'
ext.testingRepo = 'file:///tmp/myRepo/'
ext.uploadRepo = isRelease ? releaseRepo : ( isSnapshot ? snapshotRepo : testingRepo )

repositories {
    mavenCentral()
}

// A little idiot proofing...
task(checkUploadDest) << {
    if (gradle.taskGraph.hasTask(':uploadRelease')) {
        if (isSnapshot) {
            ant.fail('Release should not have suffix of -SNAPSHOT')
        }
        if (isLocal) {
            ant.fail('Release should not have suffix of -LOCAL')
        }
    } else if (gradle.taskGraph.hasTask(':uploadSnapshot')) {
        if (!isSnapshot) {
            ant.fail('Snapshot should have suffix of SNAPSHOT')
        }
    } else {
        if(!isLocal) {
            ant.fail('This is not a local version, ' +
                    'please use either uploadRelease or uploadSnapshot, or change the version suffix to -LOCAL')
        }
    }
}

ext.isLocalVersion = !version.endsWith("LOCAL")

signing {
    required { !isLocalVersion && gradle.taskGraph.hasTask('uploadArchives') }
    sign configurations.archives
}

uploadArchives {
    it.dependsOn checkUploadDest
    repositories {
        mavenDeployer {
            beforeDeployment { deployment -> signing.signPom(deployment) }
            repository(url: project.uploadRepo) {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }
            pom.project {
                parent {
                    groupId 'org.sonatype.oss'
                    artifactId 'oss-parent'
                    //noinspection GroovyAssignabilityCheck
                    version '7'
                }
                name 'easier-mock'
                description 'An add on to EasyMock to make EasyMock even Easier'
                url 'https://github.com/fsparv/EasierMock'
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
                scm {
                    connection 'scm:git:git@github.com:fsparv/EasierMock.git'
                    developerConnection 'scm:git:git@github.com:fsparv/EasierMock.git'
                    url 'git@github.com:fsparv/EasierMock.git'
                }
                developers {
                    developer {
                        id 'nsoft'
                        name 'Patrick Heck'
                        email 'gus@needhamsoftware.com'
                    }
                }
            }
            pom.withXml { root ->
                def children = root.asNode().children()
                def versionIndex = children.indexOf(children.find { it.name().localPart == 'version' })
                // Stuff that sonatype wants... there may be a way to make these appear automatically but...
                // http://issues.gradle.org/browse/GRADLE-1285
                children.add(versionIndex + 1, new Node(null, 'packaging', 'jar'))
            }
        }
    }
}

dependencies {
    compile 'junit:junit-dep:4.10'
    compile 'org.easymock:easymock:3.1'
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task(uploadSnapshot, dependsOn: uploadArchives) << {}
task(uploadRelease, dependsOn: uploadArchives) << {}

artifacts {
    archives sourcesJar
    archives javadocJar
}

jar {
    from 'LICENSE.txt'
    rename '(LICENSE.txt)', 'META-INF/$1'
}

sourcesJar {
    from 'LICENSE.txt'
    rename '(LICENSE.txt)', 'META-INF/$1'
}

javadocJar {
    from 'LICENSE.txt'
    rename '(LICENSE.txt)', 'META-INF/$1'
}

jar.manifest.attributes getManifestAttributes()
sourcesJar.manifest.attributes getManifestAttributes()
javadocJar.manifest.attributes getManifestAttributes()

@SuppressWarnings("GroovyAssignabilityCheck")
def getManifestAttributes() {
    Map<String, String> attrs = new LinkedHashMap<>();
    attrs.put('Implementation-Title', project.name)
    attrs.put('Implementation-Version', version)
    attrs.put('Build-Timestamp', getTimestamp())
    attrs.put('Build-Jdk', getJdk())
    attrs.put('Build-Tool', GradleVersion.current())
    return attrs
}

def getTimestamp() {
    def dt = new Date()
    def df = new SimpleDateFormat('yyyy-MM-dd HH:mm:ss', Locale.ENGLISH)
    df.format(dt)
}

def getJdk() {
    "${System.getProperty('java.version')} (${System.getProperty('java.vm.vendor')} ${System.getProperty('java.vm.version')})"
}

