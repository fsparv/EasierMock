import java.text.SimpleDateFormat

apply plugin: 'wrapper'
apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'jacoco'

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

version = '3.0-SNAPSHOT'
group = 'com.needhamsoftware'

ext.isSnapshot = version.endsWith('-SNAPSHOT')
ext.isLocal = version.endsWith('-LOCAL')
ext.isRelease = !(isLocal || isSnapshot)

ext.releaseRepo = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
ext.snapshotRepo = 'https://oss.sonatype.org/content/repositories/snapshots'
ext.testingRepo = 'file:///tmp/myRepo/'
ext.uploadRepo = isRelease ? releaseRepo : (isSnapshot ? snapshotRepo : testingRepo)

repositories {
    mavenCentral()
}

// A little idiot proofing...
task(checkUploadDest) {
    doLast {
        if (gradle.taskGraph.hasTask(':uploadRelease')) {
            if (isSnapshot) {
                ant.fail('Release should not have suffix of -SNAPSHOT')
            }
            if (isLocal) {
                ant.fail('Release should not have suffix of -LOCAL')
            }
        } else if (gradle.taskGraph.hasTask(':uploadSnapshot')) {
            if (!isSnapshot) {
                ant.fail('Snapshot should have suffix of SNAPSHOT')
            }
        } else {
            if (!isLocal) {
                ant.fail('This is not a local version, ' +
                        'please use either uploadRelease or uploadSnapshot, or change the version suffix to -LOCAL')
            }
        }
    }
}

ext.isLocalVersion = !version.endsWith("LOCAL")

publishing {
    publications {
        maven(MavenPublication) {
            groupId = group
            artifactId = 'easier-mock'
            version = version

            from components.java
        }
    }
}


// Uncomment this to do sonatype uploads (fails on all other machines looking for gpg key otherwise
//
//signing {
//    required { !isLocalVersion && gradle.taskGraph.hasTask('uploadArchives') }
//    sign configurations.archives
//}
//
//uploadArchives {
//    it.dependsOn checkUploadDest
//    repositories {
//        mavenDeployer {
//            beforeDeployment { deployment -> signing.signPom(deployment) }
//            repository(url: project.uploadRepo) {
//                authentication(userName: sonatypeUsername, password: sonatypePassword)
//            }
//            pom.project {
//                parent {
//                    groupId 'org.sonatype.oss'
//                    artifactId 'oss-parent'
//                    //noinspection GroovyAssignabilityCheck
//                    version '7'
//                }
//                name 'easier-mock'
//                description 'An add on to EasyMock to make EasyMock even Easier'
//                url 'https://github.com/fsparv/EasierMock'
//                licenses {
//                    license {
//                        name 'The Apache Software License, Version 2.0'
//                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
//                        distribution 'repo'
//                    }
//                }
//                scm {
//                    connection 'scm:git:git@github.com:fsparv/EasierMock.git'
//                    developerConnection 'scm:git:git@github.com:fsparv/EasierMock.git'
//                    url 'git@github.com:fsparv/EasierMock.git'
//                }
//                developers {
//                    developer {
//                        id 'nsoft'
//                        name 'Patrick Heck'
//                        email 'gus@needhamsoftware.com'
//                    }
//                }
//            }
//            pom.withXml { root ->
//                def children = root.asNode().children()
//                def versionIndex = children.indexOf(children.find { it.name().localPart == 'version' })
//                // Stuff that sonatype wants... there may be a way to make these appear automatically but...
//                // http://issues.gradle.org/browse/GRADLE-1285
//                children.add(versionIndex + 1, new Node(null, 'packaging', 'jar'))
//            }
//        }
//    }
//}

dependencies {
    implementation 'org.easymock:easymock:4.3'
    implementation 'junit:junit-dep:4.11' // req as implementation by BeanTester only.

    testImplementation 'org.testng:testng:7.4.0'
    testImplementation 'org.powermock:powermock-module-junit4:2.0.9'
    testImplementation 'org.powermock:powermock-api-easymock:2.0.9'
    testImplementation 'com.google.guava:guava:31.0.1-jre'
}

jacocoTestReport.dependsOn += test

jacocoTestReport {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    additionalSourceDirs.from = files(sourceSets.main.allJava.srcDirs)
}


task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
    from javadoc
}


artifacts {
    archives sourcesJar
    archives javadocJar
}

jar {
    from 'LICENSE.txt'
    rename '(LICENSE.txt)', 'META-INF/$1'
}

sourcesJar {
    from 'LICENSE.txt'
    rename '(LICENSE.txt)', 'META-INF/$1'
}

javadocJar {
    from 'LICENSE.txt'
    rename '(LICENSE.txt)', 'META-INF/$1'
}

jar.manifest.attributes getManifestAttributes()
sourcesJar.manifest.attributes getManifestAttributes()
javadocJar.manifest.attributes getManifestAttributes()

@SuppressWarnings("GroovyAssignabilityCheck")
def getManifestAttributes() {
    Map<String, String> attrs = new LinkedHashMap<>()
    attrs.put('Implementation-Title', project.name)
    attrs.put('Implementation-Version', version)
    attrs.put('Build-Timestamp', getTimestamp())
    attrs.put('Build-Jdk', getJdk())
    attrs.put('Build-Tool', GradleVersion.current())
    return attrs
}

static def getTimestamp() {
    def dt = new Date()
    def df = new SimpleDateFormat('yyyy-MM-dd HH:mm:ss', Locale.ENGLISH)
    df.format(dt)
}

static def getJdk() {
    "${System.getProperty('java.version')} (${System.getProperty('java.vm.vendor')} ${System.getProperty('java.vm.version')})"
}

task testng(type: Test)
testng.useTestNG()

test.dependsOn 'testng'
